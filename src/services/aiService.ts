import { OpenAI } from 'openai';
import { Article } from './newsApiService';
import * as dotenv from 'dotenv';

dotenv.config();
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const openai = new OpenAI({
  apiKey: OPENAI_API_KEY,
});

async function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}
export default async function chooseBestArticle(articles: Article[], retryCount = 0): Promise<string | null> {
  const MAX_RETRIES = 5;
  const RETRY_DELAY = 2000;
  const BACKOFF_FACTOR = 2;

  try {
    const prompt = `Eu vou te fornecer tr√™s not√≠cias. Escolha a melhor not√≠cia considerando relev√¢ncia, clareza e impacto. Explique a raz√£o da sua escolha e apresente um resumo curto dela:\n\n` +
      articles.map((article, index) => `Not√≠cia ${index + 1}:\nT√≠tulo: ${article.title}\nConte√∫do: ${article.content}`).join('\n\n');

    console.log(`ü§ñ Avaliando as tr√™s not√≠cias...`);
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 500,
      temperature: 0.5,
    });

    const result = response.choices[0].message?.content || null;
    console.log(`‚úÖ Avalia√ß√£o conclu√≠da!`);
    return result;
  } catch (error: any) {
    if (retryCount < MAX_RETRIES && error.code === 'insufficient_quota') {
      const delayTime = RETRY_DELAY * (BACKOFF_FACTOR ** retryCount);
      console.error(`‚ö†Ô∏è Erro de cota. Tentando novamente em ${delayTime / 1000} segundos...`);
      
      await delay(delayTime);
      return chooseBestArticle(articles, retryCount + 1);
    }

    console.error('‚ùå Erro ao avaliar as not√≠cias:', error.message || error);
    return null;
  }
}
